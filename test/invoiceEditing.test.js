// const jsdom = require('jsdom');
// const { JSDOM } = jsdom;

// // Create a fake DOM environment before running the tests
// const dom = new JSDOM('<!doctype html><html><body><table id="invoice_table"></table></body></html>');
// global.document = dom.window.document;
// global.window = dom.window;
// global.fetch = require('node-fetch'); // If you are using fetch in InvoicePage.js

// // Now you can run your test cases
// const invoicePage = require('../public/js/InvoicePage.js');

// describe('Testing the searching and sorting function on Invoice Page', () => {
//   beforeEach(() => {
//     global.fetch = jest.fn(() => Promise.resolve({ json: () => Promise.resolve([
//         { id: '1016', company_name: 'Sample 1', issued_date: 'June 15, 2023', amount:'$S 3617.15', status: 'PAID', action:'' },
//         { id: '1015', company_name: 'Sample 2', issued_date: 'June 14, 2023', amount:'$S 492.90', status: 'OVERDUE', action:'' }
//         ])
//     }));
//     // render the table with mock data
//     invoicePage.getData().then(data => invoicePage.renderTable(data));
//   });

//   // Seraching function related to ID
//   test('when the user chooses ID and correct type input -> have matching data', () => {

//   });
  
// });

// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Editing An Invoice Testing', function() {
  this.timeout(30000);
  let driver;
  let vars;
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build();
    vars = {};
    await driver.get("http://localhost:8000/");
    // await driver.manage().window().setRect({ width: 1552, height: 879 });
    await driver.findElement(By.linkText("Login")).click();
    await driver.findElement(By.id("username")).sendKeys("test12");
    await driver.findElement(By.id("password")).sendKeys("3200");
    await driver.findElement(By.css(".dark-button")).click();
  });
  afterEach(async function() {
    await driver.quit();
  });
  it('when the user input correct type of name input -> successfully update', async function() {
    await driver.findElement(By.css(".invoice > div")).click();
    await driver.findElement(By.id("1811")).click();
    await driver.findElement(By.id("inp_comp_name")).click();
    await driver.findElement(By.id("inp_comp_name")).sendKeys("1_page-02.jpg");
    await driver.findElement(By.css(".btn_edit_update")).click();
    expect(driver.findElement(By.id("invoice_table"[1].innerText))).toContain('1_page-02.jpg');
  });
  it('when the user input wrong type of name input -> gives an error', async function() {
    await driver.findElement(By.css(".invoice > div")).click();
    await driver.findElement(By.id("1811")).click();
    await driver.findElement(By.id("inp_comp_name")).click();
    await driver.findElement(By.id("inp_comp_name")).sendKeys("1_page 02.jpg");
    await driver.findElement(By.css(".btn_edit_update")).click();
    expect(driver.findElement(By.id("error_msg"))).toContain("Company name should not contain spaces. Please replace with '_'.");
    await driver.findElement(By.id("inp_comp_name")).click();
    await driver.findElement(By.id("inp_comp_name")).sendKeys("1_page_02.jpg");
    await driver.findElement(By.css(".btn_edit_update")).click();
    await driver.get("http://localhost:8000/");
    expect(driver.findElement(By.id("invoice_table"[1].innerText))).toContain('1_page_02.jpg');
  });
  it('when the user input correct date input -> successfully update', async function() {
    await driver.findElement(By.css(".invoice > div")).click();
    await driver.findElement(By.id("1811")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    await driver.findElement(By.id("inp_issue_date")).sendKeys("11/07/2022");
    await driver.findElement(By.css(".btn_edit_update")).click();
  });
  it('when the user input wrong date input -> gives an error', async function() {
    await driver.findElement(By.css(".invoice > div")).click();
    await driver.findElement(By.id("1811")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    await driver.findElement(By.id("inp_issue_date")).sendKeys("11/30/2022");
    await driver.findElement(By.css(".btn_edit_update")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    {
      const element = await driver.findElement(By.id("inp_issue_date"));
      await driver.actions({ bridge: true}).doubleClick(element).perform();
    }
    await driver.findElement(By.id("inp_issue_date")).sendKeys("50/01/2022");
    await driver.findElement(By.css(".btn_edit_update")).click();
    await driver.findElement(By.id("inp_issue_date")).click();
    await driver.findElement(By.id("inp_issue_date")).sendKeys("10/01/2022");
    await driver.findElement(By.css(".btn_edit_update")).click();
  });
  it('when the user input correct amount input -> successfully update', async function() {
    await driver.findElement(By.css(".invoice > div")).click()
    await driver.findElement(By.id("1811")).click()
    await driver.findElement(By.id("inp_total_amount")).click()
    await driver.findElement(By.id("inp_total_amount")).sendKeys("76as11.00")
    await driver.findElement(By.css(".btn_edit_update")).click()
    await driver.findElement(By.id("inp_total_amount")).click()
    await driver.findElement(By.id("inp_total_amount")).sendKeys("7611.00")
    await driver.findElement(By.css(".btn_edit_update")).click()
  });
  it('when the user input wrong type of amount input -> gives an error', async function() {
    await driver.findElement(By.css(".invoice > div")).click()
    await driver.findElement(By.id("1811")).click()
    await driver.findElement(By.id("inp_issue_date")).click()
    await driver.findElement(By.id("inp_issue_date")).sendKeys("11/30/2022")
    await driver.findElement(By.css(".btn_edit_update")).click()
    await driver.findElement(By.id("inp_issue_date")).click()
    await driver.findElement(By.id("inp_issue_date")).click()
    await driver.findElement(By.id("inp_issue_date")).click()
    {
      const element = await driver.findElement(By.id("inp_issue_date"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    await driver.findElement(By.id("inp_issue_date")).sendKeys("50/01/2022")
    await driver.findElement(By.css(".btn_edit_update")).click()
    await driver.findElement(By.id("inp_issue_date")).click()
    await driver.findElement(By.id("inp_issue_date")).sendKeys("10/01/2022")
    await driver.findElement(By.css(".btn_edit_update")).click()
  });
});
